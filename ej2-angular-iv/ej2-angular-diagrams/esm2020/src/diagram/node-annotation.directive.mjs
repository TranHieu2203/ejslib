import { Directive, ContentChildren } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['addInfo', 'annotationType', 'constraints', 'content', 'dragLimit', 'height', 'horizontalAlignment', 'hyperlink', 'id', 'margin', 'offset', 'rotateAngle', 'style', 'template', 'type', 'verticalAlignment', 'visibility', 'width'];
let outputs = [];
/**
 * Nodes Directive
 * ```html
 * <e-nodes>
 * <e-node>
 * <e-node-annotations>
 * <e-node-annotation>
 * </e-node-annotation>
 * </e-node-annotations>
 * </e-node>
 * </e-nodes>
 * ```
 */
export class NodeAnnotationDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
NodeAnnotationDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NodeAnnotationDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
NodeAnnotationDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NodeAnnotationDirective, selector: "e-node>e-node-annotations>e-node-annotation", inputs: { addInfo: "addInfo", annotationType: "annotationType", constraints: "constraints", content: "content", dragLimit: "dragLimit", height: "height", horizontalAlignment: "horizontalAlignment", hyperlink: "hyperlink", id: "id", margin: "margin", offset: "offset", rotateAngle: "rotateAngle", style: "style", template: "template", type: "type", verticalAlignment: "verticalAlignment", visibility: "visibility", width: "width" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NodeAnnotationDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-node>e-node-annotations>e-node-annotation',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * NodeAnnotation Array Directive
 * @private
 */
export class NodeAnnotationsDirective extends ArrayBase {
    constructor() {
        super('annotations');
    }
}
NodeAnnotationsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NodeAnnotationsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NodeAnnotationsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NodeAnnotationsDirective, selector: "e-node>e-node-annotations", queries: [{ propertyName: "children", predicate: NodeAnnotationDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NodeAnnotationsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-node>e-node-annotations',
                    queries: {
                        children: new ContentChildren(NodeAnnotationDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,
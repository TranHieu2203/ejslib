import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { AnnotationsDirective } from './annotations.directive';
import { RangesDirective } from './ranges.directive';
import { PointersDirective } from './pointers.directive';
import * as i0 from "@angular/core";
let input = ['annotations', 'background', 'direction', 'endAngle', 'hideIntersectingLabel', 'labelStyle', 'lineStyle', 'majorTicks', 'maximum', 'minimum', 'minorTicks', 'pointers', 'radius', 'rangeGap', 'ranges', 'roundingPlaces', 'showLastLabel', 'startAndEndRangeGap', 'startAngle'];
let outputs = [];
/**
 * Axes directive
 * ```html
 * <e-axes><e-axis></e-axis></e-axes>
 * ```
 */
export class AxisDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['annotations', 'ranges', 'pointers'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
AxisDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: AxisDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
AxisDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: AxisDirective, selector: "e-axes>e-axis", inputs: { annotations: "annotations", background: "background", direction: "direction", endAngle: "endAngle", hideIntersectingLabel: "hideIntersectingLabel", labelStyle: "labelStyle", lineStyle: "lineStyle", majorTicks: "majorTicks", maximum: "maximum", minimum: "minimum", minorTicks: "minorTicks", pointers: "pointers", radius: "radius", rangeGap: "rangeGap", ranges: "ranges", roundingPlaces: "roundingPlaces", showLastLabel: "showLastLabel", startAndEndRangeGap: "startAndEndRangeGap", startAngle: "startAngle" }, queries: [{ propertyName: "childAnnotations", first: true, predicate: AnnotationsDirective, descendants: true }, { propertyName: "childRanges", first: true, predicate: RangesDirective, descendants: true }, { propertyName: "childPointers", first: true, predicate: PointersDirective, descendants: true }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: AxisDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-axes>e-axis',
                    inputs: input,
                    outputs: outputs,
                    queries: {
                        childAnnotations: new ContentChild(AnnotationsDirective),
                        childRanges: new ContentChild(RangesDirective),
                        childPointers: new ContentChild(PointersDirective)
                    }
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * Axis Array Directive
 * @private
 */
export class AxesDirective extends ArrayBase {
    constructor() {
        super('axes');
    }
}
AxesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: AxesDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
AxesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: AxesDirective, selector: "ej-circulargauge>e-axes", queries: [{ propertyName: "children", predicate: AxisDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: AxesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ej-circulargauge>e-axes',
                    queries: {
                        children: new ContentChildren(AxisDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhlcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2lyY3VsYXItZ2F1Z2UvYXhlcy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBb0IsZUFBZSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVoRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBRXpELElBQUksS0FBSyxHQUFhLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLHVCQUF1QixFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUscUJBQXFCLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDdlMsSUFBSSxPQUFPLEdBQWEsRUFBRSxDQUFDO0FBQzNCOzs7OztHQUtHO0FBV0gsTUFBTSxPQUFPLGFBQWMsU0FBUSxXQUEwQjtJQW9HekQsWUFBb0IsZ0JBQWlDO1FBQ2pELEtBQUssRUFBRSxDQUFDO1FBRFEscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQTlGOUMsU0FBSSxHQUFhLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQWdHMUQsUUFBUSxDQUFDLGlCQUFpQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7SUFDbkMsQ0FBQzs7MEdBekdRLGFBQWE7OEZBQWIsYUFBYSx5bUJBTGlCLG9CQUFvQiw4RUFDekIsZUFBZSxnRkFDYixpQkFBaUI7MkZBRzVDLGFBQWE7a0JBVnpCLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLE1BQU0sRUFBRSxLQUFLO29CQUNiLE9BQU8sRUFBRSxPQUFPO29CQUNoQixPQUFPLEVBQUU7d0JBQ0wsZ0JBQWdCLEVBQUUsSUFBSSxZQUFZLENBQUMsb0JBQW9CLENBQUM7d0JBQ3hELFdBQVcsRUFBRSxJQUFJLFlBQVksQ0FBQyxlQUFlLENBQUM7d0JBQzlDLGFBQWEsRUFBRSxJQUFJLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztxQkFDckQ7aUJBQ0o7O0FBNkdEOzs7R0FHRztBQU9ILE1BQU0sT0FBTyxhQUFjLFNBQVEsU0FBd0I7SUFDdkQ7UUFDSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEIsQ0FBQzs7MEdBSFEsYUFBYTs4RkFBYixhQUFhLHdGQUhZLGFBQWE7MkZBR3RDLGFBQWE7a0JBTnpCLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsT0FBTyxFQUFFO3dCQUNMLFFBQVEsRUFBRSxJQUFJLGVBQWUsQ0FBQyxhQUFhLENBQUM7cUJBQy9DO2lCQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBWaWV3Q29udGFpbmVyUmVmLCBDb250ZW50Q2hpbGRyZW4sIENvbnRlbnRDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcGxleEJhc2UsIEFycmF5QmFzZSwgc2V0VmFsdWUgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcblxuaW1wb3J0IHsgQW5ub3RhdGlvbnNEaXJlY3RpdmUgfSBmcm9tICcuL2Fubm90YXRpb25zLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBSYW5nZXNEaXJlY3RpdmUgfSBmcm9tICcuL3Jhbmdlcy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUG9pbnRlcnNEaXJlY3RpdmUgfSBmcm9tICcuL3BvaW50ZXJzLmRpcmVjdGl2ZSc7XG5cbmxldCBpbnB1dDogc3RyaW5nW10gPSBbJ2Fubm90YXRpb25zJywgJ2JhY2tncm91bmQnLCAnZGlyZWN0aW9uJywgJ2VuZEFuZ2xlJywgJ2hpZGVJbnRlcnNlY3RpbmdMYWJlbCcsICdsYWJlbFN0eWxlJywgJ2xpbmVTdHlsZScsICdtYWpvclRpY2tzJywgJ21heGltdW0nLCAnbWluaW11bScsICdtaW5vclRpY2tzJywgJ3BvaW50ZXJzJywgJ3JhZGl1cycsICdyYW5nZUdhcCcsICdyYW5nZXMnLCAncm91bmRpbmdQbGFjZXMnLCAnc2hvd0xhc3RMYWJlbCcsICdzdGFydEFuZEVuZFJhbmdlR2FwJywgJ3N0YXJ0QW5nbGUnXTtcbmxldCBvdXRwdXRzOiBzdHJpbmdbXSA9IFtdO1xuLyoqXG4gKiBBeGVzIGRpcmVjdGl2ZVxuICogYGBgaHRtbFxuICogPGUtYXhlcz48ZS1heGlzPjwvZS1heGlzPjwvZS1heGVzPlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnZS1heGVzPmUtYXhpcycsXG4gICAgaW5wdXRzOiBpbnB1dCxcbiAgICBvdXRwdXRzOiBvdXRwdXRzLCAgICBcbiAgICBxdWVyaWVzOiB7XG4gICAgICAgIGNoaWxkQW5ub3RhdGlvbnM6IG5ldyBDb250ZW50Q2hpbGQoQW5ub3RhdGlvbnNEaXJlY3RpdmUpLCBcbiAgICAgICAgY2hpbGRSYW5nZXM6IG5ldyBDb250ZW50Q2hpbGQoUmFuZ2VzRGlyZWN0aXZlKSwgXG4gICAgICAgIGNoaWxkUG9pbnRlcnM6IG5ldyBDb250ZW50Q2hpbGQoUG9pbnRlcnNEaXJlY3RpdmUpXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBBeGlzRGlyZWN0aXZlIGV4dGVuZHMgQ29tcGxleEJhc2U8QXhpc0RpcmVjdGl2ZT4ge1xuICAgIHB1YmxpYyBkaXJlY3RpdmVQcm9wTGlzdDogYW55O1xuXHRcbiAgICBwdWJsaWMgY2hpbGRBbm5vdGF0aW9uczogYW55O1xuICAgIHB1YmxpYyBjaGlsZFJhbmdlczogYW55O1xuICAgIHB1YmxpYyBjaGlsZFBvaW50ZXJzOiBhbnk7XG4gICAgcHVibGljIHRhZ3M6IHN0cmluZ1tdID0gWydhbm5vdGF0aW9ucycsICdyYW5nZXMnLCAncG9pbnRlcnMnXTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgYW5ub3RhdGlvbiBlbGVtZW50IGZvciBhbiBheGlzIGluIGNpcmN1bGFyIGdhdWdlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgYW5ub3RhdGlvbnM6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiBhbiBheGlzLiBUaGlzIHByb3BlcnR5IGFjY2VwdHMgdmFsdWUgaW4gaGV4IGNvZGUsIHJnYmEgc3RyaW5nIGFzIGEgdmFsaWQgQ1NTIGNvbG9yIHN0cmluZy5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgcHVibGljIGJhY2tncm91bmQ6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgZGlyZWN0aW9uIG9mIGFuIGF4aXMuXG4gICAgICogQGRlZmF1bHQgQ2xvY2tXaXNlXG4gICAgICovXG4gICAgcHVibGljIGRpcmVjdGlvbjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIGFuZCBnZXRzIHRoZSBlbmQgYW5nbGUgb2YgYW4gYXhpcyBpbiBjaXJjdWxhciBnYXVnZSBjb21wb25lbnQuXG4gICAgICogQGRlZmF1bHQgMTYwXG4gICAgICovXG4gICAgcHVibGljIGVuZEFuZ2xlOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIEVuYWJsZXMgYW5kIGRpc2FibGVzIHRoZSBpbnRlcnNlY3RpbmcgbGFiZWxzIHRvIGJlIGhpZGRlbiBpbiBheGlzLlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgcHVibGljIGhpZGVJbnRlcnNlY3RpbmdMYWJlbDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIGFuZCBnZXRzIHRoZSBzdHlsZSBvZiB0aGUgYXhpcyBsYWJlbCBpbiBjaXJjdWxhciBnYXVnZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHVibGljIGxhYmVsU3R5bGU6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgc3R5bGUgb2YgdGhlIGxpbmUgaW4gYXhpcyBvZiBjaXJjdWxhciBnYXVnZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHVibGljIGxpbmVTdHlsZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIGFuZCBnZXRzIHRoZSBtYWpvciB0aWNrIGxpbmVzIG9mIGFuIGF4aXMgaW4gY2lyY3VsYXIgZ2F1Z2UgY29tcG9uZW50LlxuICAgICAqIEBkZWZhdWx0IHsgd2lkdGg6IDIsIGhlaWdodDogMTAgfVxuICAgICAqL1xuICAgIHB1YmxpYyBtYWpvclRpY2tzOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNldHMgYW5kIGdldHMgdGhlIG1heGltdW0gdmFsdWUgb2YgYW4gYXhpcyBpbiB0aGUgY2lyY3VsYXIgZ2F1Z2UgY29tcG9uZW50LlxuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmUgXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBtYXhpbXVtOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNldHMgYW5kIGdldHMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYW4gYXhpcyBpbiB0aGUgY2lyY3VsYXIgZ2F1Z2UgY29tcG9uZW50LlxuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmUgXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBtaW5pbXVtOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNldHMgYW5kIGdldHMgdGhlIG1pbm9yIHRpY2sgbGluZXMgb2YgYW4gYXhpcyBpbiBjaXJjdWxhciBnYXVnZSBjb21wb25lbnQuXG4gICAgICogQGRlZmF1bHQgeyB3aWR0aDogMiwgaGVpZ2h0OiA1IH1cbiAgICAgKi9cbiAgICBwdWJsaWMgbWlub3JUaWNrczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIGFuZCBnZXRzIHRoZSBwb2ludGVycyBvZiBhbiBheGlzIGluIGNpcmN1bGFyIGdhdWdlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcG9pbnRlcnM6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgcmFkaXVzIG9mIGFuIGF4aXMgaW4gY2lyY3VsYXIgZ2F1Z2UuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyByYWRpdXM6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgZ2FwIGJldHdlZW4gdGhlIHJhbmdlcyBieSBzcGVjaWZpZWQgdmFsdWUgaW4gY2lyY3VsYXIgZ2F1Z2UgY29tcG9uZW50LlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgcmFuZ2VHYXA6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgcmFuZ2VzIG9mIGFuIGF4aXMgaW4gY2lyY3VsYXIgZ2F1Z2UgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHB1YmxpYyByYW5nZXM6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgcm91bmRpbmcgT2ZmIHZhbHVlIGluIHRoZSBsYWJlbCBpbiBhbiBheGlzLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgcm91bmRpbmdQbGFjZXM6IGFueTtcbiAgICAvKiogXG4gICAgICogRW5hYmxlcyBhbmQgZGlzYWJsZXMgdGhlIGxhc3QgbGFiZWwgb2YgYXhpcyB3aGVuIGl0IGlzIGhpZGRlbiBpbiBjaXJjdWxhciBnYXVnZSBjb21wb25lbnQuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgc2hvd0xhc3RMYWJlbDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBFbmFibGVzIGFuZCBkaXNhYmxlcyB0aGUgc3RhcnQgYW5kIGVuZCBnYXAgYmV0d2VlbiB0aGUgcmFuZ2VzIGFuZCBheGlzIGluIGNpcmN1bGFyIGdhdWdlLlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgcHVibGljIHN0YXJ0QW5kRW5kUmFuZ2VHYXA6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgc3RhcnQgYW5nbGUgb2YgYW4gYXhpcyBpbiBjaXJjdWxhciBnYXVnZSBjb21wb25lbnQuXG4gICAgICogQGRlZmF1bHQgMjAwXG4gICAgICovXG4gICAgcHVibGljIHN0YXJ0QW5nbGU6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjpWaWV3Q29udGFpbmVyUmVmKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHNldFZhbHVlKCdjdXJyZW50SW5zdGFuY2UnLCB0aGlzLCB0aGlzLnZpZXdDb250YWluZXJSZWYpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKG91dHB1dHMpO1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZVByb3BMaXN0ID0gaW5wdXQ7XG4gICAgfVxufVxuXG4vKipcbiAqIEF4aXMgQXJyYXkgRGlyZWN0aXZlXG4gKiBAcHJpdmF0ZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2VqLWNpcmN1bGFyZ2F1Z2U+ZS1heGVzJyxcbiAgICBxdWVyaWVzOiB7XG4gICAgICAgIGNoaWxkcmVuOiBuZXcgQ29udGVudENoaWxkcmVuKEF4aXNEaXJlY3RpdmUpXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgQXhlc0RpcmVjdGl2ZSBleHRlbmRzIEFycmF5QmFzZTxBeGVzRGlyZWN0aXZlPiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdheGVzJyk7XG4gICAgfVxufSJdfQ==
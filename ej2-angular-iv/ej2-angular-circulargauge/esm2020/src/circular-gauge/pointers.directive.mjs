import { Directive, ContentChildren } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['animation', 'border', 'cap', 'color', 'description', 'imageUrl', 'linearGradient', 'markerHeight', 'markerShape', 'markerWidth', 'needleEndWidth', 'needleStartWidth', 'needleTail', 'offset', 'pointerWidth', 'position', 'radialGradient', 'radius', 'roundedCornerRadius', 'text', 'textStyle', 'type', 'value'];
let outputs = [];
/**
 * Pointers directive
 * ```html
 * <e-pointers><e-pointer></e-pointer></e-pointers>
 * ```
 */
export class PointerDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
PointerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PointerDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
PointerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: PointerDirective, selector: "e-pointers>e-pointer", inputs: { animation: "animation", border: "border", cap: "cap", color: "color", description: "description", imageUrl: "imageUrl", linearGradient: "linearGradient", markerHeight: "markerHeight", markerShape: "markerShape", markerWidth: "markerWidth", needleEndWidth: "needleEndWidth", needleStartWidth: "needleStartWidth", needleTail: "needleTail", offset: "offset", pointerWidth: "pointerWidth", position: "position", radialGradient: "radialGradient", radius: "radius", roundedCornerRadius: "roundedCornerRadius", text: "text", textStyle: "textStyle", type: "type", value: "value" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PointerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-pointers>e-pointer',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * Pointer Array Directive
 * @private
 */
export class PointersDirective extends ArrayBase {
    constructor() {
        super('pointers');
    }
}
PointersDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PointersDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
PointersDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: PointersDirective, selector: "ej-circulargauge>e-axes>e-axis>e-pointers", queries: [{ propertyName: "children", predicate: PointerDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PointersDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ej-circulargauge>e-axes>e-axis>e-pointers',
                    queries: {
                        children: new ContentChildren(PointerDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,